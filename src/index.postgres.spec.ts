import { describe, it, expect, beforeAll } from 'vitest';
import { db } from './helpers';
import sql from '@sqltools/formatter';
import dedent from 'dedent-js';
import sqlFunctionBuilder from './utils/functionBuilder';
import sqlShape from './utils/sqlUtils';
const sqlFn = sqlFunctionBuilder(db);

// convert knex results to csv
const toCsv = (results: any[]) => {
  if (results.length === 0) return '';
  const headers = Object.keys(results[0]).join(', ');
  const rows = results.map((row) => Object.values(row).join(', '));
  return headers.concat('\n', rows.join('\n'));
};

const sqlShapeHelper = sqlShape(db);

beforeAll(async () => {
  await db.schema.dropTableIfExists('locations');

  await db.raw('CREATE EXTENSION IF NOT EXISTS postgis');
  await db.schema.createTable('locations', (table) => {
    table.increments('id').primary();
    table.string('name');
    table.specificType('a_point', 'geography(point, 4326)').comment('a nearby notable location');
    table.specificType('b_point', 'geography(point, 4326)').comment('another nearby notable location');
    table.specificType('location', 'geography(point, 4326)');
  });
  await db('locations').insert([
    {
      name: 'Denver',
      a_point: sqlShapeHelper.toRaw({ lat: 39.92, lon: -105.001 }),
      b_point: sqlShapeHelper.toRaw({ lat: 39.12, lon: -104.895 }),
      location: sqlShapeHelper.toRaw({
        lat: 39.7392,
        lon: -104.9903,
      }),
    },
    {
      name: 'Boulder',
      a_point: sqlShapeHelper.toRaw({ lat: 40.1121, lon: -105.2695 }),
      b_point: sqlShapeHelper.toRaw({ lat: 40.0198, lon: -105.2711 }),
      location: sqlShapeHelper.toRaw({
        lon: -105.2705,
        lat: 40.015,
      }),
    },
    {
      name: 'Colorado Springs',
      a_point: sqlShapeHelper.toRaw({ lat: 38.8349, lon: -104.8124 }),
      b_point: sqlShapeHelper.toRaw({ lat: 38.8344, lon: -104.8242 }),
      location: sqlShapeHelper.toRaw({
        lon: -104.8214,
        lat: 38.8339,
      }),
    },
    {
      name: 'Fort Collins',
      a_point: sqlShapeHelper.toRaw({ lat: 40.5853, lon: -105.0844 }),
      b_point: sqlShapeHelper.toRaw({ lat: 40.5733, lon: -105.0678 }),
      location: sqlShapeHelper.toRaw({
        lon: -105.0844,
        lat: 40.5853,
      }),
    },
    {
      name: 'London',
      a_point: sqlShapeHelper.toRaw({ lat: 51.5105, lon: -0.1289 }),
      b_point: sqlShapeHelper.toRaw({ lat: 51.5501, lon: -0.1269 }),
      location: sqlShapeHelper.toRaw({
        lon: -0.1278,
        lat: 51.5074,
      }),
    },
    {
      name: 'Dublin',
      location: sqlShapeHelper.toRaw({
        lon: -6.2603,
        lat: 53.3498,
      }),
    },
    {
      name: 'Johannesburg',
      location: sqlShapeHelper.toRaw({
        lon: 28.0473,
        lat: -26.2041,
      }),
    },
  ]);
});

describe('selectDistance', async () => {
  it('should return distance', async () => {
    const results = await db
      .from('locations')
      .select('id', 'name')
      .selectDistance(
        'location',
        { lat: 39.87, lon: -104.128 },
        'distance',
        'miles',
      )
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      id, name, distance
      1, Denver, 46.76364343556754
      2, Boulder, 61.49208742434806
      3, Colorado Springs, 80.54810033585734
      4, Fort Collins, 70.66702320273974
      5, London, 4661.361410293635
      6, Dublin, 4375.31609420101
      7, Johannesburg, 9548.97453837791`,
    );
  });

  it('should ignore distance if undefined input', async () => {
    const results = db
      .from('locations')
      .select('id', 'name')
      // @ts-expect-error
      .selectDistance('location', { lat: undefined, lon: undefined })
      .then((data) => data);

    expect(toCsv(await results)).toBe(dedent`id, name
    1, Denver
    2, Boulder
    3, Colorado Springs
    4, Fort Collins
    5, London
    6, Dublin
    7, Johannesburg`);
  });

  it('should include & sort on distance in query', async () => {
    const results = db
      .from('locations')
      .select('id', 'name')
      .selectDistance(
        'location',
        { lat: 39.87, lon: -104.128 },
        'distance',
        'miles',
      )
      .orderBy('distance')
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      id, name, distance
      1, Denver, 46.76364343556754
      2, Boulder, 61.49208742434806
      4, Fort Collins, 70.66702320273974
      3, Colorado Springs, 80.54810033585734
      6, Dublin, 4375.31609420101
      5, London, 4661.361410293635
      7, Johannesburg, 9548.97453837791`,
    );
  });

  it('should include & sort on distance in query', async () => {
    const results = db
      .from('locations')
      .selectDistance(
        'location',
        { lat: 39.87, lon: -104.128 },
        'distance',
        'meters',
      )
      .orderBy('distance')
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      distance
      75258.78898117
      98961.92194385
      113727.54978919
      129629.60198691
      7041388.70430583
      7501734.0174876
      15367584.87949126`,
    );
  });
});

describe('selectBuffer', async () => {
  it('should return buffer on shape', async () => {
    const results = db
      .from('locations')
      .selectBuffer({ lat: 39.87, lon: -104.128 }, 1_000, 'meters', 'buffer', 'ewkt')
      .where('id', 1)
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      buffer
      SRID=4326;POLYGON((-104.11630839665477 39.8699115100706,-104.11655559368633 39.86815566573859,-104.11724255681096 39.866470716662235,-104.11834285884159 39.86492140679013,-104.11981419789392 39.86356726414236,-104.12160002574474 39.86246031487047,-104.12363172178087 39.861643085868195,-104.12583122886933 39.861146972395474,-104.12811405003451 39.86099103315683,-104.13039249123992 39.861181258898576,-104.13257902632432 39.861710342478354,-104.13458965555395 39.862557959199044,-104.13634712948802 39.86369154670625,-104.13778391490457 39.865067554655795,-104.1388447892228 39.86663311638356,-104.1394889638483 39.868328078631734,-104.13969165466486 39.87008731162106,-104.13944503886327 39.8718432109355,-104.13875856066868 39.87352829522796,-104.13765857344195 39.87507779996445,-104.13618733114134 39.87643216745852,-104.1344013672605 39.87753933732785,-104.1323693231219 39.87835674909471,-104.130169308854 39.87885297967494,-104.12788589864587 39.87900895253544,-104.12560687621047 39.87881867181126,-104.12341985619601 39.87828945301536,-104.1214089121625 39.87744164143027,-104.11965134147675 39.87630782907677,-104.11821469209026 39.87493160052979,-104.1171541658745 39.873365856037445,-104.11651049842844 39.87167077668179,-104.11630839665477 39.8699115100706))`,
    );
  });

  it('should return buffer using miles', async () => {
    const results = db
      .from('locations')
      .selectBuffer({ lat: 39.87, lon: -104.128 }, '10mi', 'meters', 'buffer', 'ewkt')
      .where('id', 1)
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      buffer
      SRID=4326;POLYGON((-103.939848591801 39.868432795039176,-103.94389734358795 39.8401820418565,-103.95501161910383 39.81308194194182,-103.97275722194512 39.78817192360795,-103.99644764135921 39.76640639078636,-104.02517111304405 39.748618483738284,-104.05782585092425 39.735488560735625,-104.0931620709187 39.72751853706748,-104.12982924221993 39.72501299557939,-104.16642686783885 39.72806773599194,-104.20155701001765 39.73656616588844,-104.23387673422734 39.75018366155873,-104.26214864612537 39.76839974867912,-104.28528773936615 39.79051767791367,-104.30240286083504 39.81569070592776,-104.31283123748712 39.84295414534706,-104.31616469981637 39.8712620256412,-104.3122664845737 39.89952701897139,-104.30127780487233 39.92666213917328,-104.28361373650334 39.95162262658504,-104.25994837705805 39.97344639397949,-104.23118967508182 39.991291435469,-104.19844477956592 40.00446869450107,-104.16297720006233 40.01246904913288,-104.12615746595007 40.0149832987408,-104.08940930112685 40.01191431781245,-104.05415356215632 40.00338086683384,-104.0217523047523 39.98971290132972,-103.99345533567003 39.971438579362314,-103.97035147538065 39.94926351605461,-103.95332651252473 39.92404315280604,-103.9430294941038 39.89674938317899,-103.939848591801 39.868432795039176))`,
    );
  });

  it('should return buffer on column', async () => {
    const results = db
      .from('locations')
      .selectBuffer('location', 1_000, 'meters', 'buffer', 'geojson')
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      buffer
      {"type":"Polygon","coordinates":[[[-104.978629149,39.739198438],[-104.978853938,39.737440674],[-104.97951856,39.73575054],[-104.980597446,39.734192978],[-104.982049115,39.732827834],[-104.983817775,39.731707557],[-104.985835463,39.730875187],[-104.988024659,39.7303627],[-104.990301263,39.730189784],[-104.992577818,39.730363081],[-104.994766871,39.730875933],[-104.996784326,39.731708641],[-104.998552671,39.732829213],[-105.000003958,39.734194599],[-105.001082407,39.735752341],[-105.001746555,39.737442587],[-105.001970851,39.739200389],[-105.001746644,39.740958196],[-105.001082515,39.742648457],[-105.000003959,39.744206207],[-104.998552405,39.745571573],[-104.996783629,39.746692071],[-104.994765612,39.747524629],[-104.992575922,39.748037242],[-104.990298737,39.748210202],[-104.9880216,39.748036861],[-104.985832054,39.747523883],[-104.98381427,39.746690987],[-104.982045809,39.745570193],[-104.980594638,39.744204585],[-104.979516519,39.742646655],[-104.978852864,39.740956283],[-104.978629149,39.739198438]]]}
      {"type":"Polygon","coordinates":[[[-105.258782428,40.015026758],[-105.259000934,40.013268552],[-105.25966131,40.011576904],[-105.260738149,40.010016816],[-105.262190049,40.00864823],[-105.263961209,40.007523729],[-105.26598357,40.006686513],[-105.268179432,40.006168744],[-105.270464438,40.005990314],[-105.272750809,40.006158076],[-105.274950716,40.006665586],[-105.276979645,40.007493347],[-105.278759646,40.00860956],[-105.280222322,40.009971342],[-105.281311455,40.011526373],[-105.281985172,40.013214906],[-105.282217556,40.014972057],[-105.281999641,40.016730305],[-105.281339769,40.018422077],[-105.280263269,40.019982353],[-105.278811491,40.021351161],[-105.27704022,40.022475888],[-105.275017531,40.023313296],[-105.272821172,40.023831194],[-105.270535578,40.024009672],[-105.268248616,40.023841869],[-105.266048206,40.023334235],[-105.264018937,40.022506285],[-105.262238813,40.021389849],[-105.260776249,40.020027842],[-105.259687444,40.018472619],[-105.259014223,40.016783957],[-105.258782428,40.015026758]]]}
      {"type":"Polygon","coordinates":[[[-104.809878507,38.833881817],[-104.81010456,38.832124108],[-104.810764659,38.830434664],[-104.811833409,38.828878401],[-104.813269721,38.827515117],[-104.815018393,38.826397189],[-104.81701223,38.825567567],[-104.819174628,38.825058121],[-104.821422516,38.824888423],[-104.823669538,38.825064991],[-104.825829376,38.825581044],[-104.827819054,38.826416756],[-104.829562128,38.827540023],[-104.830991619,38.828907688],[-104.832052585,38.830467207],[-104.832704236,38.832158658],[-104.832921503,38.833917046],[-104.832696005,38.835674801],[-104.832036376,38.837364368],[-104.830967937,38.838920814],[-104.829531732,38.840284313],[-104.827782946,38.841402456],[-104.82578879,38.842232259],[-104.823625918,38.842741825],[-104.821377474,38.842911563],[-104.819129896,38.84273495],[-104.81696959,38.842218774],[-104.8149796,38.841382878],[-104.813236419,38.840259397],[-104.811807043,38.838891517],[-104.810746395,38.837331817],[-104.810095217,38.835640246],[-104.809878507,38.833881817]]]}
      {"type":"Polygon","coordinates":[[[-105.072583372,40.585308029],[-105.07280852,40.58355034],[-105.073479087,40.58185991],[-105.074569275,40.580301692],[-105.076037169,40.578935559],[-105.077826352,40.577813995],[-105.079868073,40.57698009],[-105.08208389,40.576465878],[-105.084388678,40.576291114],[-105.086693902,40.576462511],[-105.088911006,40.576973484],[-105.090954818,40.577804404],[-105.092746816,40.578923351],[-105.09421814,40.580287338],[-105.095312242,40.581843959],[-105.095987057,40.583533406],[-105.096216623,40.585290762],[-105.095992082,40.587048495],[-105.095322031,40.588739054],[-105.094232188,40.590297465],[-105.092764416,40.591663827],[-105.090975115,40.59278562],[-105.088933052,40.593619719],[-105.086716722,40.594134061],[-105.084411327,40.594308872],[-105.082105496,40.594137431],[-105.079887877,40.593626329],[-105.077843719,40.592795215],[-105.076051599,40.59167604],[-105.074580393,40.590311825],[-105.073486633,40.588755009],[-105.072812332,40.587065432],[-105.072583372,40.585308029]]]}
      {"type":"Polygon","coordinates":[[[-0.113409355,51.507046469],[-0.113796645,51.505301309],[-0.114722,51.503636827],[-0.11614981,51.502116975],[-0.118025175,51.500800142],[-0.120276021,51.499736915],[-0.122815867,51.498968134],[-0.125547149,51.498523327],[-0.128364961,51.498419581],[-0.131161078,51.498660881],[-0.133828108,51.49923796],[-0.136263606,51.500128653],[-0.138374007,51.50129875],[-0.140078215,51.502703304],[-0.141310721,51.504288357],[-0.142024119,51.505993011],[-0.142190938,51.507751767],[-0.141804705,51.509497036],[-0.140880202,51.511161745],[-0.139452909,51.512681904],[-0.137577646,51.51399908],[-0.135326474,51.515062632],[-0.132785921,51.515831672],[-0.13005366,51.516276631],[-0.127234746,51.5163804],[-0.124437572,51.516138991],[-0.12176969,51.515561687],[-0.119333675,51.514670686],[-0.117223171,51.513500246],[-0.11551929,51.512095367],[-0.114287491,51.510510055],[-0.113575072,51.508805248],[-0.113409355,51.507046469]]]}
      {"type":"Polygon","coordinates":[[[-6.245294818,53.349454346],[-6.245696122,53.347709385],[-6.246658559,53.346044794],[-6.248145091,53.344524529],[-6.250098556,53.343206992],[-6.252443879,53.342142797],[-6.255090949,53.341372819],[-6.257938086,53.340926633],[-6.260875938,53.340821375],[-6.263791674,53.34106109],[-6.266573312,53.341636571],[-6.26911401,53.342525716],[-6.271316161,53.343694376],[-6.273095147,53.345097659],[-6.274382581,53.346681659],[-6.275128944,53.348385518],[-6.275305491,53.350143769],[-6.274905368,53.351888843],[-6.273943884,53.353553673],[-6.272457934,53.355074266],[-6.270504589,53.356392168],[-6.268158909,53.357456712],[-6.265511057,53.358226969],[-6.262662832,53.358673321],[-6.259723753,53.358778607],[-6.256806836,53.358538779],[-6.254024245,53.357963059],[-6.251482966,53.357073586],[-6.249280693,53.355904561],[-6.247502065,53.354500928],[-6.246215413,53.35291665],[-6.245470138,53.351212625],[-6.245294818,53.349454346]]]}
      {"type":"Polygon","coordinates":[[[28.057307901,-26.204026775],[28.057131511,-26.205789475],[28.056577287,-26.207487262],[28.055666513,-26.209054887],[28.054434179,-26.2104321],[28.052927638,-26.211565969],[28.051204789,-26.212412913],[28.049331848,-26.212940376],[28.047380806,-26.213128085],[28.045426656,-26.212968822],[28.043544513,-26.212468711],[28.04180672,-26.211646973],[28.040280071,-26.210535193],[28.039023238,-26.209176104],[28.038084517,-26.207621943],[28.037499975,-26.205932441],[28.037292061,-26.204172529],[28.037468749,-26.202409844],[28.038023231,-26.200712121],[28.038934185,-26.199144601],[28.040166593,-26.197767517],[28.04167309,-26.196633781],[28.043395784,-26.195786955],[28.045268482,-26.195259575],[28.047219232,-26.195071904],[28.049173084,-26.195231151],[28.051054969,-26.195731197],[28.052792581,-26.196552831],[28.054319157,-26.197664482],[28.055576035,-26.199023437],[28.05651491,-26.200577482],[28.057099694,-26.2022669],[28.057307901,-26.204026775]]]}
      `,
    );
  });

  it('should return buffer in miles', async () => {
    const results = db
      .from('locations')
      .selectBuffer('location', '1000 miles', 'meters', 'buffer', 'ewkt')
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      buffer
      SRID=4326;POLYGON((-86.66182967166792 38.2727079687331,-87.64245909750458 35.63027870739414,-89.12799440070525 33.15499048442816,-91.05253474811416 30.912790726221942,-93.35449909076019 28.96660026139995,-95.97128609362306 27.376086414642476,-98.83486700348094 26.195080421184052,-101.86943495351535 25.46727712934207,-104.99174877276833 25.221438128954887,-108.1140538371537 25.467628705970334,-111.1485920462477 26.195791055897256,-114.01211221790277 27.37716842575317,-116.62879200477018 28.96806611107276,-118.93058298114549 30.9146471684827,-120.85486104269282 33.15723233826597,-122.34002010619744 35.632882679312495,-123.32013300935935 38.27562659105486,-123.7201658097982 41.01428626201526,-123.45379897688204 43.76836903239404,-122.42697774603533 46.44302157525467,-120.55176426312678 48.92481951350018,-117.77553229266158 51.08131707458144,-114.12632874298606 52.76840256411435,-109.76154637304936 53.84894942079638,-104.9872528399003 54.22140363054148,-100.21327420000665 53.84794535833832,-95.84934734875887 52.76651293245151,-92.20132680259064 51.07874302731781,-89.4263771774984 48.92179511608524,-87.55237818490082 46.43977274100368,-86.52661360810018 43.7650899316067,-86.26111455609662 41.0111306339347,-86.66182967166792 38.2727079687331))
      SRID=4326;POLYGON((-86.85370125630294 38.57691410605664,-87.83629796683273 35.93152118414858,-89.32605092487469 33.45316920956691,-91.25623681890956 31.207891731436167,-93.56466022200301 29.258598620730897,-96.1882861868397 27.66486083577022,-99.05882030309161 26.48034485696827,-102.10035382598966 25.74854081487815,-105.22970062441739 25.49800685606449,-108.35929803958992 25.73865475515801,-111.40167995469191 26.460368318597823,-114.27393843586566 27.63445796544267,-116.90059547547384 29.217431707938914,-119.21390513147513 31.155782936834687,-121.15146900613456 33.39027293292391,-122.65179401775798 35.85849550702418,-123.64889887710328 38.49508965610588,-124.06743233213852 41.22955157400217,-123.82033330101251 43.982098206928036,-122.81214770176142 46.65855680397176,-120.95262624594058 49.14602292683908,-118.18583483225912 51.31219188719663,-114.53598730867445 53.0124447396281,-110.15752007826417 54.1083274440191,-105.35642648350662 54.49630117363304,-100.5464155888181 54.13649535983044,-96.14373940268621 53.06544551707088,-92.46045911984385 51.3843704589734,-89.65748330014489 49.2308092798213,-87.76374432139279 46.749620108267756,-86.72582732293694 44.0740048511391,-86.45433559326679 41.31800355915926,-86.85370125630294 38.57691410605664))
      SRID=4326;POLYGON((-86.7235260531354 37.38778392322353,-87.67818353772726 34.74305062846638,-89.13583158160199 32.263923476863404,-91.03222395049016 30.01698708170306,-93.30682001237402 28.065887537370678,-95.89756353109205 26.471063627845936,-98.73654392890292 25.287106999564923,-101.74769755747721 24.558383009277815,-104.84722088995973 24.314142425705878,-107.94659736364662 24.564676171685907,-110.95724551125593 25.29984034654445,-113.79517527513543 26.49048084086261,-116.3840357781348 28.092239723273302,-118.65555380399451 30.05042183747488,-120.54725714108714 32.30436746460218,-121.99815308320842 34.79009405933808,-122.94352698795426 37.440568590021485,-123.31038206416865 40.183582293573735,-123.01557876209304 42.93772536336111,-121.9697181933387 45.60750138715893,-120.09108088732944 48.07938791659654,-117.33410807109918 50.22174463862934,-113.73253040909606 51.892450403832385,-109.44424261036579 52.95741348129539,-104.76730146984399 53.318288541565856,-100.09587652614893 52.93928777238097,-95.82261078100159 51.8583163910429,-92.24189055656409 50.17520990730369,-89.5076375421585 48.02467119691086,-87.65062218683428 45.54869562769471,-86.62365226000259 42.87836417048285,-86.34441169277783 40.1264720822341,-86.7235260531354 37.38778392322353))
      SRID=4326;POLYGON((-86.53575220364354 39.08985416847089,-87.54338080267678 36.4507729173743,-89.0572383289218 33.98041946551851,-91.00994759995288 31.74404508028458,-93.33903979938336 29.803818386732356,-95.98148945309615 28.21863776176262,-98.86923400265187 27.041601876312487,-101.92676701818672 26.315780918040883,-105.07141134843602 26.069499938505356,-108.21613797059749 26.31264422798358,-111.27394773214547 27.035267394622874,-114.1622496689798 28.20900556830457,-116.8056711532283 29.790789343245105,-119.1363207054401 31.72757035240684,-121.09137253426739 33.96055348045204,-122.60857976005279 36.42772632175441,-123.62080187208689 39.06404639872554,-124.05100035438633 41.79922485190272,-123.80975263044331 44.55354222825307,-122.79848370802621 47.232655674404526,-120.92324620908276 49.72313951976316,-118.12464008813114 51.89170757944101,-114.42541717332152 53.592322850124184,-109.98295350595335 54.68501866256925,-105.1118379229629 55.06536125880264,-100.2378489463355 54.69391695338481,-95.78759695514556 53.6090584216903,-92.07764798379685 51.914485771395995,-89.26747121243295 49.74988230669267,-87.38132754535704 47.2613676770224,-86.36060892522933 44.58251602310285,-86.11162488564878 41.82711270273435,-86.53575220364354 39.08985416847089))
      SRID=4326;POLYGON((21.763149447509967 48.81755274450507,20.136214087043243 46.31914647275317,18.031300432368415 44.02080060692745,15.526174469493391 41.97230168432992,12.686406572424637 40.22148050533597,9.573143490236882 38.81426077413776,6.248851598660686 37.79260745268659,2.780624807752551 37.190999082790015,-0.75909513002166 37.032444799373685,-4.294066317260194 37.32527993920456,-7.7471591264875 38.06179394197935,-11.043302764236921 39.21913830038098,-14.111100626124005 40.76215317974064,-16.88212555979513 42.64709573001175,-19.287483482799086 44.82500552334789,-21.251748831402292 47.24360780184244,-22.68472810830744 49.84704103154016,-23.471892520417136 52.57308614750141,-23.465306991578583 55.347886044314954,-22.47954892097647 58.07850987843162,-20.303004303193173 60.64457968986013,-16.744283713808766 62.89237074328013,-11.73745466715318 64.63903549140639,-5.497189177397328 65.6985216416009,1.383044724036947 65.93389845494865,8.058790214399053 65.31343915229357,13.771275062913492 63.925989089655864,18.108811049509733 61.940895924215994,21.011053712335617 59.54841094521865,22.622660782344397 56.918957469555,23.15545679588061 54.188801721634164,22.812932994049802 51.46186929592357,21.763149447509967 48.81755274450507))
      SRID=4326;POLYGON((16.467717946774563 50.532440868672275,14.71824468033633 48.052164803740034,12.494266286459851 45.775496374028904,9.875606849501064 43.74998669736015,6.928500858676474 42.02137235184337,3.71386773397611 40.63362700589636,0.293302078163804 39.6269645082181,-3.26748232006485 39.034419875061786,-6.89781414719851 38.878004690867726,-10.523464627467687 39.16562884867779,-14.069376691800732 39.889799666623176,-17.462415258487887 41.02852311601824,-20.632798790547348 42.54805419877622,-23.513222873577103 44.40651455809624,-26.03521717673259 46.557156200229045,-28.122733325232808 48.9502028668398,-29.6832410205252 51.53255789923088,-30.59689796176779 54.24501680713317,-30.705244631908606 57.01687189724807,-29.803603785581156 59.75806383076262,-27.648113597226466 62.34977240012967,-24.000831439596986 64.63654365548057,-18.74680693502648 66.42800695563295,-12.086137187165894 67.52428207344138,-4.67718378589828 67.77388839179696,2.502925041510222 67.14006026463106,8.581417257898368 65.72001943105695,13.114263656763026 63.69746193556191,16.072105738027222 61.27389386471407,17.647981620967833 58.624988563445996,18.093699131105488 55.88775422841739,17.63908667565149 53.16456651628502,16.467717946774563 50.532440868672275))
      SRID=4326;POLYGON((43.858739486696564 -25.218576518672556,43.972436408410985 -27.966657172279714,43.50791270744011 -30.692150795673182,42.42351594136417 -33.30060159420525,40.691652996278115 -35.685819822939855,38.31593679984137 -37.73150821468644,35.35248133900593 -39.31867997544779,31.92747829244577 -40.339709616803965,28.23882618096972 -40.71675807005974,24.532615312092076 -40.41848579029472,21.058757080292818 -39.467587987037504,18.024875378008986 -37.935328712362384,15.568908074734514 -35.925934128572464,13.75723947311011 -33.55807893451571,12.600593058155146 -30.950004332335087,12.075273676202373 -28.211115555915143,12.141045167244432 -25.439566965348963,12.752373949470819 -22.723766498977486,13.863261899848991 -20.14553829188446,15.427241037177282 -17.783074159543485,17.39434527428194 -15.712311696057998,19.706838342262625 -14.005908526523049,22.295456009224253 -12.729628853703526,25.077794882862257 -11.936770442961235,27.959959000072363 -11.66208448930795,30.841519789073256 -11.917105558356743,33.62253806023878 -12.688539831171028,36.21048879054099 -13.94032472032147,38.524970999693416 -15.618628969967533,40.49904682581735 -17.65808583353747,42.07735266647258 -19.987358496270286,43.21212510066934 -22.532647892264883,43.858739486696564 -25.218576518672556))
      `,
    );
  });

  it('should return buffer on column', async () => {
    const results = db
      .from('locations')
      .select('id')
      // @ts-expect-error
      .selectBuffer('location', undefined)
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      id
      1
      2
      3
      4
      5
      6
      7`,
    );
  });

  it('should ignore invalid shape', async () => {
    const results = db
      .from('locations')
      .select('id')
      // @ts-expect-error
      .selectBuffer({ lat: undefined, lon: -1 }, 1_000)
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      id
      1
      2
      3
      4
      5
      6
      7`,
    );
  });
});

describe('whereDistance', async () => {
  it('should include & sort on distance in query', async () => {
    const q = db
      .from('locations')
      .select('id', 'name')
      .selectDistance('location', { lat: 39.87, lon: -104.128, radius: '100 km' }, 'distance', 'miles')
      .whereDistance('location', { lat: 39.87, lon: -104.128 }, '<=', 100, 'miles')
      .orderBy('distance')

    // console.log('whereDistance', q.toSQL().toNative())

    const results = q.then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      id, name, distance
      1, Denver, 0
      2, Boulder, 0
      4, Fort Collins, 8.571433074053775
      3, Colorado Springs, 18.67537677256696`,
    );
  });

  it('should compute distance w/ 2 columns', async () => {
    const results = db
      .from('locations')
      .select('id')
      .selectDistance('location', 'a_point', 'distance', 'miles')
      .orderBy('distance', 'desc')
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      id, distance
      7, 
      6, 
      1, 12.486675747658673
      2, 6.69957384995377
      3, 0.4904467100880856
      5, 0.2195016917079257
      4, 0`,
    );
  });

  it('should handle invalid distance arg', async () => {
    const badQuery = () =>
      db
        .from('locations')
        .whereDistance(
          'location',
          { lat: 39.87, lon: -104.128 },
          '<=',
          undefined,
        )
        .then((data) => data);

    expect(badQuery).toThrow();
  });

  it('should handle invalid operator arg', async () => {
    const badQuery = () =>
      db
        .from('locations')
        .whereDistance(
          'location',
          { lat: 39.87, lon: -104.128 },
          // @ts-expect-error
          '>>>',
          undefined,
        )
        .then((data) => data);

    expect(badQuery).toThrow();
  });

  it('should ignore undefined args', async () => {
    const results = db
      .from('locations')
      .select('id')
      .whereDistance(
        'location',
        // @ts-expect-error
        undefined,
        '>=',
        100,
      )
      .orderBy('distance')
      .then((data) => data);

    expect(results).rejects.toThrow();
  });

  it('should handle distance in meters', async () => {
    const results = db
      .from('locations')
      .select('id')
      .selectDistance('location', 'a_point', 'distance', 'meters')
      .whereDistance('location', 'a_point', '<=', 100, 'meters')
      .orderBy('distance')
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
      id, distance
      4, 0`
      );
  });
});

describe('whereDistanceWithin', async () => {
  it('should include & sort on distance in query', async () => {
    const results = db
      .from('locations')
      .select('id', 'name')
      .selectDistance(
        'location',
        { lat: 39.87, lon: -104.128, radius: 100 },
        'distance',
        'meters',
      )
      .whereDistanceWithin(
        'location',
        { lat: 39.87, lon: -104.128 },
        100,
        'kilometers',
      )
      .orderBy('distance')
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent``,
    );
  });

  it('should ignore bad shape', async () => {
    const results = db
      .from('locations')
      .select('id', 'name')
      .whereDistanceWithin(
        'location',
        // @ts-expect-error
        { lat: undefined, lon: undefined },
        100,
      )
      .orderBy('distance')
      .then((data) => data);

    expect(results).rejects.toThrow();
  });

  it('should ignore undefined args', async () => {
    const results = db
      .from('locations')
      .select('id')
      .whereDistanceWithin(
        'location',
        // @ts-expect-error
        undefined,
        100,
      )
      .orderBy('distance')
      .then((data) => data);

    expect(results).rejects.toThrow();
  });

  it('should fail when sorting a non-existent virtual column reference', async () => {
    // Missing: .selectDistance('location', { lat: 39.87, lon: -104.128, radius: 100 }, 'distance', 'meters')
    const results = db
      .from('locations')
      .select('id')
      .whereDistanceWithin('location', 'a_point', 100, 'meters')
      .orderBy('distance')
      .then((data) => data);

    expect(results).rejects.toThrow();
  });

  it('should handle invalid distance arg', async () => {
    const badQuery = () =>
      db
        .from('locations')
        .select('id')
        .whereDistanceWithin('a_location', 'a_point', undefined)
        .then((data) => data);

    expect(badQuery).toThrow();
  });
});

describe('selectIntersection', async () => {
  it('should return intersection w/ column & shape', async () => {
    const results = db
      .from('locations')
      .selectIntersection('location', {
        lat: 39.87,
        lon: -104.128,
        radius: '1000 km',
      })
      .then((data) => data);

    expect(toCsv(await results)).toBe(dedent`
    intersection
    0101000020E6100000A54E4013613F5AC086A5F91A9EDE4340
    0101000020E61000005A643BDF4F515AC0D30C1085EB014440
    0101000020E6100000CD3B4ED191345AC0F628263CBD6A4340
    0101000020E610000014F241CF66455AC0F715351CEB4A4440
    0101000020E6100000000000000000F87F000000000000F87F
    0101000020E6100000000000000000F87F000000000000F87F
    0101000020E6100000000000000000F87F000000000000F87F`);
  });

  it('should return intersection w/ shape & shape', async () => {
    const results = db
      .from('locations')
      .selectIntersection(
        { lat: 39, lon: -105, radius: '500 km' },
        {
          lat: 39.87,
          lon: -104.128,
          radius: '1000 km',
        },
        'meters',
        // @ts-expect-error
        'text',        
      )
      .then((data) => data);

    expect(toCsv(await results)).toBe(
      dedent`
        meters
        POLYGON((-99.41754457990542 37.9881550468272,-99.79921167956931 37.16116005272059,-100.36487889975216 36.40615409777171,-101.09048934058188 35.74954184099588,-101.94835501617503 35.21398595047728,-102.90793189479986 34.817832981198116,-103.9365277167646 34.574606394173934,-105.00000000000001 34.492599077067155,-106.0634722832354 34.574606394173934,-107.09206810520014 34.81783298119812,-108.05164498382497 35.21398595047728,-108.9095106594181 35.74954184099585,-109.63512110024784 36.40615409777171,-110.20078832043069 37.16116005272059,-110.58245542009459 37.9881550468272,-110.76061332000693 38.85762486435187,-110.72142476173897 39.737659413836134,-110.458074399089 40.59480021627195,-109.97227311726131 41.3950893344638,-109.27571680653034 42.10537575402874,-108.39116326220336 42.69488876591936,-107.3527007285065 43.13700804937913,-106.20480809235488 43.411063635964595,-105.00000000000003 43.50391868390818,-103.79519190764519 43.411063635964595,-102.64729927149358 43.13700804937915,-101.60883673779672 42.69488876591939,-100.72428319346973 42.10537575402878,-100.02772688273875 41.395089334463805,-99.54192560091103 40.59480021627204,-99.27857523826107 39.73765941383616,-99.23938667999309 38.85762486435193,-99.41754457990542 37.9881550468272))
        POLYGON((-99.41754457990542 37.9881550468272,-99.79921167956931 37.16116005272059,-100.36487889975216 36.40615409777171,-101.09048934058188 35.74954184099588,-101.94835501617503 35.21398595047728,-102.90793189479986 34.817832981198116,-103.9365277167646 34.574606394173934,-105.00000000000001 34.492599077067155,-106.0634722832354 34.574606394173934,-107.09206810520014 34.81783298119812,-108.05164498382497 35.21398595047728,-108.9095106594181 35.74954184099585,-109.63512110024784 36.40615409777171,-110.20078832043069 37.16116005272059,-110.58245542009459 37.9881550468272,-110.76061332000693 38.85762486435187,-110.72142476173897 39.737659413836134,-110.458074399089 40.59480021627195,-109.97227311726131 41.3950893344638,-109.27571680653034 42.10537575402874,-108.39116326220336 42.69488876591936,-107.3527007285065 43.13700804937913,-106.20480809235488 43.411063635964595,-105.00000000000003 43.50391868390818,-103.79519190764519 43.411063635964595,-102.64729927149358 43.13700804937915,-101.60883673779672 42.69488876591939,-100.72428319346973 42.10537575402878,-100.02772688273875 41.395089334463805,-99.54192560091103 40.59480021627204,-99.27857523826107 39.73765941383616,-99.23938667999309 38.85762486435193,-99.41754457990542 37.9881550468272))
        POLYGON((-99.41754457990542 37.9881550468272,-99.79921167956931 37.16116005272059,-100.36487889975216 36.40615409777171,-101.09048934058188 35.74954184099588,-101.94835501617503 35.21398595047728,-102.90793189479986 34.817832981198116,-103.9365277167646 34.574606394173934,-105.00000000000001 34.492599077067155,-106.0634722832354 34.574606394173934,-107.09206810520014 34.81783298119812,-108.05164498382497 35.21398595047728,-108.9095106594181 35.74954184099585,-109.63512110024784 36.40615409777171,-110.20078832043069 37.16116005272059,-110.58245542009459 37.9881550468272,-110.76061332000693 38.85762486435187,-110.72142476173897 39.737659413836134,-110.458074399089 40.59480021627195,-109.97227311726131 41.3950893344638,-109.27571680653034 42.10537575402874,-108.39116326220336 42.69488876591936,-107.3527007285065 43.13700804937913,-106.20480809235488 43.411063635964595,-105.00000000000003 43.50391868390818,-103.79519190764519 43.411063635964595,-102.64729927149358 43.13700804937915,-101.60883673779672 42.69488876591939,-100.72428319346973 42.10537575402878,-100.02772688273875 41.395089334463805,-99.54192560091103 40.59480021627204,-99.27857523826107 39.73765941383616,-99.23938667999309 38.85762486435193,-99.41754457990542 37.9881550468272))
        POLYGON((-99.41754457990542 37.9881550468272,-99.79921167956931 37.16116005272059,-100.36487889975216 36.40615409777171,-101.09048934058188 35.74954184099588,-101.94835501617503 35.21398595047728,-102.90793189479986 34.817832981198116,-103.9365277167646 34.574606394173934,-105.00000000000001 34.492599077067155,-106.0634722832354 34.574606394173934,-107.09206810520014 34.81783298119812,-108.05164498382497 35.21398595047728,-108.9095106594181 35.74954184099585,-109.63512110024784 36.40615409777171,-110.20078832043069 37.16116005272059,-110.58245542009459 37.9881550468272,-110.76061332000693 38.85762486435187,-110.72142476173897 39.737659413836134,-110.458074399089 40.59480021627195,-109.97227311726131 41.3950893344638,-109.27571680653034 42.10537575402874,-108.39116326220336 42.69488876591936,-107.3527007285065 43.13700804937913,-106.20480809235488 43.411063635964595,-105.00000000000003 43.50391868390818,-103.79519190764519 43.411063635964595,-102.64729927149358 43.13700804937915,-101.60883673779672 42.69488876591939,-100.72428319346973 42.10537575402878,-100.02772688273875 41.395089334463805,-99.54192560091103 40.59480021627204,-99.27857523826107 39.73765941383616,-99.23938667999309 38.85762486435193,-99.41754457990542 37.9881550468272))
        POLYGON((-99.41754457990542 37.9881550468272,-99.79921167956931 37.16116005272059,-100.36487889975216 36.40615409777171,-101.09048934058188 35.74954184099588,-101.94835501617503 35.21398595047728,-102.90793189479986 34.817832981198116,-103.9365277167646 34.574606394173934,-105.00000000000001 34.492599077067155,-106.0634722832354 34.574606394173934,-107.09206810520014 34.81783298119812,-108.05164498382497 35.21398595047728,-108.9095106594181 35.74954184099585,-109.63512110024784 36.40615409777171,-110.20078832043069 37.16116005272059,-110.58245542009459 37.9881550468272,-110.76061332000693 38.85762486435187,-110.72142476173897 39.737659413836134,-110.458074399089 40.59480021627195,-109.97227311726131 41.3950893344638,-109.27571680653034 42.10537575402874,-108.39116326220336 42.69488876591936,-107.3527007285065 43.13700804937913,-106.20480809235488 43.411063635964595,-105.00000000000003 43.50391868390818,-103.79519190764519 43.411063635964595,-102.64729927149358 43.13700804937915,-101.60883673779672 42.69488876591939,-100.72428319346973 42.10537575402878,-100.02772688273875 41.395089334463805,-99.54192560091103 40.59480021627204,-99.27857523826107 39.73765941383616,-99.23938667999309 38.85762486435193,-99.41754457990542 37.9881550468272))
        POLYGON((-99.41754457990542 37.9881550468272,-99.79921167956931 37.16116005272059,-100.36487889975216 36.40615409777171,-101.09048934058188 35.74954184099588,-101.94835501617503 35.21398595047728,-102.90793189479986 34.817832981198116,-103.9365277167646 34.574606394173934,-105.00000000000001 34.492599077067155,-106.0634722832354 34.574606394173934,-107.09206810520014 34.81783298119812,-108.05164498382497 35.21398595047728,-108.9095106594181 35.74954184099585,-109.63512110024784 36.40615409777171,-110.20078832043069 37.16116005272059,-110.58245542009459 37.9881550468272,-110.76061332000693 38.85762486435187,-110.72142476173897 39.737659413836134,-110.458074399089 40.59480021627195,-109.97227311726131 41.3950893344638,-109.27571680653034 42.10537575402874,-108.39116326220336 42.69488876591936,-107.3527007285065 43.13700804937913,-106.20480809235488 43.411063635964595,-105.00000000000003 43.50391868390818,-103.79519190764519 43.411063635964595,-102.64729927149358 43.13700804937915,-101.60883673779672 42.69488876591939,-100.72428319346973 42.10537575402878,-100.02772688273875 41.395089334463805,-99.54192560091103 40.59480021627204,-99.27857523826107 39.73765941383616,-99.23938667999309 38.85762486435193,-99.41754457990542 37.9881550468272))
        POLYGON((-99.41754457990542 37.9881550468272,-99.79921167956931 37.16116005272059,-100.36487889975216 36.40615409777171,-101.09048934058188 35.74954184099588,-101.94835501617503 35.21398595047728,-102.90793189479986 34.817832981198116,-103.9365277167646 34.574606394173934,-105.00000000000001 34.492599077067155,-106.0634722832354 34.574606394173934,-107.09206810520014 34.81783298119812,-108.05164498382497 35.21398595047728,-108.9095106594181 35.74954184099585,-109.63512110024784 36.40615409777171,-110.20078832043069 37.16116005272059,-110.58245542009459 37.9881550468272,-110.76061332000693 38.85762486435187,-110.72142476173897 39.737659413836134,-110.458074399089 40.59480021627195,-109.97227311726131 41.3950893344638,-109.27571680653034 42.10537575402874,-108.39116326220336 42.69488876591936,-107.3527007285065 43.13700804937913,-106.20480809235488 43.411063635964595,-105.00000000000003 43.50391868390818,-103.79519190764519 43.411063635964595,-102.64729927149358 43.13700804937915,-101.60883673779672 42.69488876591939,-100.72428319346973 42.10537575402878,-100.02772688273875 41.395089334463805,-99.54192560091103 40.59480021627204,-99.27857523826107 39.73765941383616,-99.23938667999309 38.85762486435193,-99.41754457990542 37.9881550468272))`,
    );
  });

  it('should ignore invalid shapes', async () => {
    const results = db
      .from('locations')
      .select('id')
      // @ts-expect-error
      .selectIntersection('location', {
        lat: undefined,
        lon: -104.128,
        radius: 1_000,
      })
      .then((data) => data);

    expect(toCsv(await results)).toBe(dedent`
    id
    1
    2
    3
    4
    5
    6
    7`);
  });
});

describe('selectArea', async () => {
  it('should return area w/ column', async () => {
    const results = db
      .from('locations')
      .select('id')
      .selectArea('location')
      .then((data) => data);

    expect(toCsv(await results)).toBe(dedent`
    id, area
    1, 0
    2, 0
    3, 0
    4, 0
    5, 0
    6, 0
    7, 0`);
  });

  it('should return area w/ column', async () => {
    const results = db
      .from('locations')
      .select('id')
      // @ts-expect-error
      .selectArea({ radius: undefined })
      .then((data) => data);

    expect(toCsv(await results)).toBe(dedent`
    id
    1
    2
    3
    4
    5
    6
    7`);
  });
});

describe('whereContains', async () => {
  it('handles column & shape', async () => {
    const results = db
      .from('locations')
      .select('id')
      .whereContains({
        x: 1,
        y: 2,
        radius: 3,
      }, {
        x: 39.87,
        y: -104.128,
      })
      .then((data) => data);

    expect(toCsv(await results)).toBe(dedent``);
  });

  it('handles invalid shape', async () => {
    const results = db
      .from('locations')
      .select('id')
      // @ts-expect-error
      .whereContains('location', {
        lat: undefined,
        lon: -104.128,
      })
      .then((data) => data);

    expect(toCsv(await results)).toBe(dedent`
    id
    1
    2
    3
    4
    5
    6
    7`);
  });
});

describe('selectBuffer', async () => {
  it('should throw in invalid distance', async () => {
    expect(() =>
      db
        .from('locations')
        .select('id')
        .selectBuffer('location', NaN)
        .toSQL()
        .toNative(),
    ).toThrow();
  });
});
